// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SeturContactList.Repository;

namespace SeturContactList.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220215071024_ID-to-UUID-Converting-v3")]
    partial class IDtoUUIDConvertingv3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("uuid-ossp")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("SeturContactList.Core.Entities.PersonContacts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("identifier")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Info")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Long")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonContacts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("71a1a403-ee7f-47b3-938a-eb6e0a96179f"),
                            Address = "İzmir Çiğli",
                            City = "İzmir",
                            CreatedDate = new DateTime(2022, 2, 15, 10, 10, 23, 325, DateTimeKind.Local).AddTicks(8274),
                            Email = "mustafaalkan64@gmail.com",
                            Info = "Test Info",
                            Lat = 34m,
                            Long = 27m,
                            PersonId = new Guid("8d3c2b96-0030-468d-9873-abe1840b2bb1"),
                            Phone = "+905553332211",
                            Town = "Çiğli"
                        },
                        new
                        {
                            Id = new Guid("9bac7aea-eba5-49ca-bad8-0e7cf06bfd74"),
                            Address = "İzmir Bornova",
                            City = "İzmir",
                            CreatedDate = new DateTime(2022, 2, 15, 10, 10, 23, 325, DateTimeKind.Local).AddTicks(8304),
                            Email = "mustafaalkan64@gmail.com",
                            Info = "Test Info",
                            Lat = 34m,
                            Long = 27m,
                            PersonId = new Guid("8d3c2b96-0030-468d-9873-abe1840b2bb1"),
                            Phone = "+905553332212",
                            Town = "Bornova"
                        },
                        new
                        {
                            Id = new Guid("745d839f-b7b0-4212-835e-b430690c5dc3"),
                            Address = "İzmir Çiğli",
                            City = "İzmir",
                            CreatedDate = new DateTime(2022, 2, 15, 10, 10, 23, 325, DateTimeKind.Local).AddTicks(8310),
                            Email = "mustafaalkan64@gmail.com",
                            Info = "Test Info",
                            Lat = 38m,
                            Long = 26m,
                            PersonId = new Guid("6c18f769-1323-4837-88af-83b9cacb8e71"),
                            Phone = "+905553332211",
                            Town = "Çiğli"
                        },
                        new
                        {
                            Id = new Guid("42eb2eaa-28cf-4b61-814e-ffa4c9bb1a58"),
                            Address = "İzmir Bornova",
                            City = "İzmir",
                            CreatedDate = new DateTime(2022, 2, 15, 10, 10, 23, 325, DateTimeKind.Local).AddTicks(8334),
                            Email = "mustafaalkan64@gmail.com",
                            Info = "Test Info",
                            Lat = 38m,
                            Long = 26m,
                            PersonId = new Guid("8d3c2b96-0030-468d-9873-abe1840b2bb1"),
                            Phone = "+905553332212",
                            Town = "Bornova"
                        });
                });

            modelBuilder.Entity("SeturContactList.Core.Entities.Persons", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("identifier")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d3c2b96-0030-468d-9873-abe1840b2bb1"),
                            Company = "TestCompany",
                            CreatedDate = new DateTime(2022, 2, 15, 10, 10, 23, 322, DateTimeKind.Local).AddTicks(2260),
                            Name = "Mustafa",
                            Surname = "Alkan"
                        },
                        new
                        {
                            Id = new Guid("6c18f769-1323-4837-88af-83b9cacb8e71"),
                            Company = "TestCompany1",
                            CreatedDate = new DateTime(2022, 2, 15, 10, 10, 23, 325, DateTimeKind.Local).AddTicks(3525),
                            Name = "Ahmet",
                            Surname = "Alkan"
                        });
                });

            modelBuilder.Entity("SeturContactList.Core.Entities.ReportDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("identifier")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Long")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RegisteredPersonCount")
                        .HasColumnType("integer");

                    b.Property<int>("RegisteredPhoneCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReportId")
                        .IsUnique();

                    b.ToTable("ReportDetail");
                });

            modelBuilder.Entity("SeturContactList.Core.Entities.Reports", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("identifier")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("ReportStatus")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<DateTime>("RequestedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("SeturContactList.Core.Entities.PersonContacts", b =>
                {
                    b.HasOne("SeturContactList.Core.Entities.Persons", "Person")
                        .WithMany("PersonContacts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("SeturContactList.Core.Entities.ReportDetail", b =>
                {
                    b.HasOne("SeturContactList.Core.Entities.Reports", "Report")
                        .WithOne("ReportDetail")
                        .HasForeignKey("SeturContactList.Core.Entities.ReportDetail", "ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("SeturContactList.Core.Entities.Persons", b =>
                {
                    b.Navigation("PersonContacts");
                });

            modelBuilder.Entity("SeturContactList.Core.Entities.Reports", b =>
                {
                    b.Navigation("ReportDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
